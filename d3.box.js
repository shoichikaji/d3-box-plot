// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  d3.svg.box = function() {
    var box, plotKey, scale, whisker, width;
    plotKey = {
      min: 'min',
      q1: 'q1',
      med: 'med',
      q3: 'q3',
      max: 'max',
      mean: 'mean'
    };
    scale = function(d) {
      return d;
    };
    width = 30;
    whisker = function(source, target) {
      return function() {
        var s;
        s = this.append('g').classed('whisker', true);
        s.append('path').attr({
          d: "M" + source[0] + "," + source[1] + "L" + target[0] + "," + target[1]
        });
        return s.append('path').attr({
          d: "M0," + target[1] + "L" + (target[0] * 2) + "," + target[1]
        });
      };
    };
    box = function(g) {
      return g.each(function() {
        var scaled, six;
        g = d3.select(this);
        six = this.__data__;
        scaled = {};
        d3.keys(six).forEach(function(k) {
          return scaled[k] = scale(six[k]);
        });
        g.append('rect').attr({
          width: width,
          height: Math.abs(scaled[plotKey.q3] - scaled[plotKey.q1]),
          x: 0,
          y: scaled[plotKey.q3]
        });
        g.append('line').attr({
          x1: 0,
          x2: width,
          y1: scaled[plotKey.med],
          y2: scaled[plotKey.med]
        });
        if (scaled[plotKey.mean]) {
          g.append('line').attr({
            x1: 0,
            x2: width,
            y1: scaled[plotKey.mean],
            y2: scaled[plotKey.mean],
            'stroke-dasharray': '2 1'
          });
        }
        g.call(whisker([width / 2, scaled[plotKey.q1]], [width / 2, scaled[plotKey.min]]));
        return g.call(whisker([width / 2, scaled[plotKey.q3]], [width / 2, scaled[plotKey.max]]));
      });
    };
    box.scale = function(_s) {
      if (!_s) {
        return scale;
      }
      scale = _s;
      return box;
    };
    box.width = function(_w) {
      if (!_w) {
        return width;
      }
      width = _w;
      return box;
    };
    box.plotKey = function(_k) {
      if (!_k) {
        return key;
      }
      plotKey = _k;
      return box;
    };
    return box;
  };

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  this.boxPlot = function(svg, data, option) {
    var box, boxMargin, boxWidth, h, labels, main, margin, w, xAxis, xScale, yAxis, yDomain, yScale;
    if (option == null) {
      option = {};
    }
    if (!svg.attr('width')) {
      svg.attr('width', 500);
    }
    if (!svg.attr('height')) {
      svg.attr('height', 300);
    }
    option.yTickFormat || (option.yTickFormat = function(y) {
      return y;
    });
    option.xTickFormat || (option.xTickFormat = function(x) {
      return x;
    });
    option.plotKey || (option.plotKey = {
      min: 'min',
      q1: 'q1',
      med: 'med',
      q3: 'q3',
      max: 'max',
      mean: 'mean'
    });
    margin = {
      top: 20,
      left: 50,
      bottom: 40,
      right: 20
    };
    main = svg.append('g').attr({
      width: svg.attr('width') - margin.left - margin.right,
      height: svg.attr('height') - margin.top - margin.bottom,
      transform: "translate(" + margin.left + "," + margin.top + ")"
    });
    w = main.attr('width');
    h = main.attr('height');
    labels = data[0].values.map(function(v) {
      return v.key;
    });
    boxWidth = w / labels.length;
    boxMargin = 0;
    if (boxWidth > 30) {
      boxMargin = boxWidth - 25;
      boxWidth = 25;
    } else if ((30 >= boxWidth && boxWidth > 20)) {
      boxMargin = boxWidth - 20;
      boxWidth = 20;
    } else if ((20 >= boxWidth && boxWidth > 10)) {
      boxMargin = boxWidth - 10;
      boxWidth = 10;
    }
    yDomain = (function(data) {
      var max;
      max = 0;
      data.forEach(function(d) {
        return d.values.forEach(function(v) {
          var _max;
          _max = v.values[0][option.plotKey.max];
          if (max < _max) {
            return max = _max;
          }
        });
      });
      return max;
    })(data);
    xScale = d3.scale.ordinal().domain(labels).rangePoints([0, w], 1);
    yScale = d3.scale.linear().domain([0, yDomain]).range([h, 0]);
    xAxis = d3.svg.axis().scale(xScale).tickFormat(option.xTickFromat);
    yAxis = d3.svg.axis().scale(yScale).orient('left').tickSize(-w).ticks(h > 300 ? 10 : 5).tickFormat(option.yTickFormat);
    main.append('g').classed('x axis', true).call(xAxis).attr({
      transform: "translate(0," + h + ")"
    });
    main.append('g').classed('y axis', true).call(yAxis);
    box = d3.svg.box().scale(yScale).width(boxWidth).plotKey(option.plotKey);
    return data.map(function(d, i) {
      var kind;
      kind = d.key;
      data = d.values.map(function(v) {
        return v.values[0];
      });
      return main.selectAll("g." + kind).data(data).enter().append('g').classed("box-" + kind, true).attr({
        transform: function(_d, _i) {
          return "translate(" + (_i * (box.width() + boxMargin) + boxMargin / 2) + ",0)";
        }
      }).call(box);
    });
  };

}).call(this);
